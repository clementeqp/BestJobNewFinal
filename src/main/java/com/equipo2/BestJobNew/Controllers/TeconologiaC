package com.equipo2.BestJobNew.Controllers;

import com.equipo2.BestJobNew.Entities.Tecnologia;
import com.equipo2.BestJobNew.Repositories.TecnologiaRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;
@RestController
public class TecnologiaController {
    //ATRIBUTOS
    private static final String API_BASE="/api/v1";
    private final Logger log= LoggerFactory.getLogger(TecnologiaController.class);

    private TecnologiaRepository tecnologiaRepository;

    //CONSTRUCTORES

    /**
     * Constructor con todos los parametros
     * @param tecnologiaRepository de Tecnologia
     */
    public TecnologiaController(TecnologiaRepository tecnologiaRepository) {
        this.tecnologiaRepository = tecnologiaRepository;
    }

    //METODOS

    /**
     * Metodo que muestra todas las ofertas en la base de datos
     * @return ResponseEntity con todas las ofertas en la base de datos
     */
    @GetMapping(API_BASE+"/tecnologias")
    public ResponseEntity<List<Tecnologia>> muestraTodas(){
        log.info("Se van a mostrar todas las ofertas");
        return new ResponseEntity<>(tecnologiaRepository.findAll(), HttpStatus.OK);
    }

    /**
     * Metodo que muestra la oferta pasado por id
     * @return ResponseEntity con la oferta pasada por id
     */
    @GetMapping(API_BASE+"/tecnologias/{id}")
    public ResponseEntity<Tecnologia> muestraOfertaId(@PathVariable("id")Long id){
        Optional<Tecnologia> ofertaOpt=tecnologiaRepository.findById(id);
        if(ofertaOpt.isPresent()){
            log.info("Se muestra la oferta "+id);
            return new ResponseEntity(tecnologiaRepository.findById(id), HttpStatus.OK);
        }else{
            log.warn("El id: "+id+" no existe en la base de datos");
            return ResponseEntity.notFound().build();
        }

    }

    /**
     * Metodo que crea la tecnologia en la base de datos
     * @param tecnologia objeto tecnologia
     * @return ResponseEntity con la tecnologia si se ha creado manda HttPStatus Ok y si no un Not foud
     */
    @PostMapping(API_BASE+"/tecnologias")
    public ResponseEntity<Tecnologia> creartecnologia(@RequestBody Tecnologia tecnologia){
        Optional<Tecnologia> tecnologiaOpt=tecnologiaRepository.findById(tecnologia.getId());
        if(tecnologiaOpt.isPresent()){
            log.warn("La tecnologia ya existe en la base de datos");
            return ResponseEntity.notFound().build();
        }else{
            log.info("tecnologia:"+tecnologia.toString()+" creada con exito");
            return ResponseEntity.ok(tecnologiaRepository.save(tecnologia));
        }
    }

    /**
     * Metodo que borra una tecnologia de la base de datos
     * @param id de la tecnologia
     * @return Response Entity con el estado NO Content
     */
    @DeleteMapping(API_BASE+"/tecnologias/{id}")
    public ResponseEntity<HttpStatus> borrarOferta(@PathVariable("id")Long id){
        tecnologiaRepository.deleteById(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    /**
     * Metodo que elimina todas las tecnologias de la base de datos
     * @return ResponseEntity con el estado NO content
     */
    @DeleteMapping(API_BASE+"/tecnologias")
    public ResponseEntity<HttpStatus> borrarTodas(){
        tecnologiaRepository.deleteAll();
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }

    //GETTER Y SETTER

    public Logger getLog() {
        return log;
    }

    public TecnologiaRepository getTecnologiaRepository() {
        return tecnologiaRepository;
    }

    public void setTecnologiaRepository(TecnologiaRepository tecnologiaRepository) {
        this.tecnologiaRepository = tecnologiaRepository;
    }
}